// Add this to your main schema.prisma file

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assigneeId  String?       @map("assignee_id")
  reporterId  String        @map("reporter_id")
  tags        String[]
  dueDate     DateTime?     @map("due_date")
  resolvedAt  DateTime?     @map("resolved_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  assignee    User?         @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporter    User          @relation("TicketReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  comments    TicketComment[]
  attachments TicketAttachment[]

  @@map("tickets")
  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([createdAt])
  @@index([dueDate])
}

model TicketComment {
  id        String   @id @default(cuid())
  ticketId  String   @map("ticket_id")
  authorId  String   @map("author_id")
  content   String   @db.Text
  isInternal Boolean @default(false) @map("is_internal")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author    User     @relation("TicketCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("ticket_comments")
  @@index([ticketId])
  @@index([authorId])
}

model TicketAttachment {
  id        String   @id @default(cuid())
  ticketId  String   @map("ticket_id")
  filename  String
  fileUrl   String   @map("file_url")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  uploadedBy String  @map("uploaded_by")
  createdAt DateTime @default(now()) @map("created_at")

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploader  User     @relation("TicketAttachmentUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("ticket_attachments")
  @@index([ticketId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Update User model to include ticket relations
// Add these to your existing User model:
// assignedTickets Ticket[] @relation("TicketAssignee")
// reportedTickets Ticket[] @relation("TicketReporter")
// ticketComments  TicketComment[] @relation("TicketCommentAuthor")
// ticketAttachments TicketAttachment[] @relation("TicketAttachmentUploader")