generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  passwordHash  String
  passwordSalt  String
  role          Role     @default(USER)
  isActive      Boolean  @default(true)
  isVerified    Boolean  @default(false)
  lastLoginAt   DateTime?
  loginAttempts Int      @default(0)
  lockedUntil   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  version       Int      @default(1)

  sessions         Session[]
  auditLogs        AuditLog[]
  profile          UserProfile?
  assignedTickets  Ticket[] @relation("TicketAssignee")
  reportedTickets  Ticket[] @relation("TicketReporter")

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  avatar      String?
  bio         String?
  phone       String?
  timezone    String?
  language    String   @default("en")
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @db.VarChar(500)
  refreshToken String   @db.VarChar(500)
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  ipAddress    String?
  userAgent    String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accessToken])
  @@unique([refreshToken])
  @@map("sessions")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  timestamp  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
  GUEST
}

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assigneeId  String?       @map("assignee_id")
  reporterId  String        @map("reporter_id")
  tags        String?       @db.Text
  dueDate     DateTime?     @map("due_date")
  resolvedAt  DateTime?     @map("resolved_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  assignee    User?         @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporter    User          @relation("TicketReporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("tickets")
  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([reporterId])
  @@index([createdAt])
  @@index([dueDate])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}